#!/usr/bin/env python
import json
import subprocess, shlex
import os
from tempfile import NamedTemporaryFile as ntf
from collections import defaultdict

def read_all_with_name(path):
    d = list_path(path)
    _data = defaultdict(list)
    for x in d:
        _path = os.path.join(path, x)
        base_path = os.path.basename(_path)
        _data[base_path].append(get_secrets_from_path(_path).get('data'))
    return _data

def read_all(path):
    d = list_path(path)
    _data = list()
    for x in d:
        _path = os.path.join(path, x)
        base_path = os.path.basename(_path)
        _data.append(get_secrets_from_path(_path).get('data'))
    return _data

def list_path(path):
    p = subprocess.Popen(shlex.split("vault list -format=json {0}".format(path)),
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    out, err = p.communicate()
    return json.loads(out)


def get_secrets_from_path(path):
    p = subprocess.Popen(shlex.split("vault read -format=json {0}".format(path)), 
                            stdout=subprocess.PIPE, 
                            stderr=subprocess.PIPE)

    out, err = p.communicate()
    return json.loads(out)


def stat_path(path):
    try:
        list_path(path)
        found_path = True
    except Exception, e:
        found_path = False
    try:
        read_all_with_name(path)
        found_path = True
    except Exception, e:
        found_path = False
    return found_path


def delete_path(path):
    p = subprocess.Popen(shlex.split("vault delete {0}".format(path)), 
                            stdout=subprocess.PIPE, 
                            stderr=subprocess.PIPE)

    out, err = p.communicate()
    return dict(rc=p.returncode, stdout=out, stderr=err)


def edit_secrets(secrets):
    _ntf = ntf(mode="w", delete=False)
    if 'data' in secrets:
        _d = secrets.get('data')
    else:
        _d = secrets
    _ntf.write(json.dumps(_d, separators=(',',':'), indent=4, sort_keys=True))
    _ntf.close()
    return _ntf.name


def save_secrets(path, var, val):
    try:
        secrets = get_secrets_from_path(path)
        _data = secrets.get('data')
    except Exception, e:
        _data = dict()
    _data[var] = val
    tmp_secrets_file = edit_secrets(_data)
    p = subprocess.Popen(shlex.split("vault write {0} @{1}".format(path, tmp_secrets_file)), 
                            stdout=subprocess.PIPE, 
                            stderr=subprocess.PIPE)
    out, err = p.communicate()
    return p.returncode, out, err


def get_secret_from_path_with_var(path, var):
    _secrets = get_secrets_from_path(path)
    return _secrets.get('data').get(var)


def main():
    module = AnsibleModule(
        argument_spec = dict(
            path = dict(required=True),
            var = dict(required=False),
            mode = dict(required=False, default="read", choices=["stat", "read","list","write","delete", "readall"]),
            value = dict(required=False),
            vault_addr = dict(required=False),
            vault_token = dict(required=False),
            vault_skip_verify = dict(required=False),
            preserve_name = dict(required=False, type='bool')
        )
    )

    for k, v in module.params.items():
        if 'vault' in k:
            if v:
                os.environ[k.upper()] = v

    path = module.params.get('path')
    var = module.params.get('var')
    val = module.params.get('value')
    mode = module.params.get('mode')

    if mode == "stat":
        found_path = stat_path(path)
        module.exit_json(changed=False, found=found_path)


    if mode =="readall":
        try:
            if module.params.get('preserve_name'):
                module.exit_json(changed=False, vault_secrets=read_all_with_name(path))
            else:
                module.exit_json(changed=False, vault_secrets=read_all(path))
        except Exception, e:
            module.fail_json(changed=False, msg=str(e))

    if mode =="delete":
        try:
            del_path = delete_path(path)
            if del_path.get('rc') > 0:
                module.fail_json(changed=False, msg=del_path.get('stderr'))
            else:
                module.exit_json(changed=True, path=path)
        except Exception, e:
            module.fail_json(changed=False, msg=str(e))
            
    if mode == "read":
        if not var:
            try:
                module.exit_json(changed=False, vault_secrets=get_secrets_from_path(path).get('data'))
            except Exception, e:
                module.fail_json(changed=False, msg=str(e))

        if var:
            try:
                d = dict()
                d[var] = get_secret_from_path_with_var(path, var)
                module.exit_json(changed=False, **d)
            except Exception, e:
                module.fail_json(changed=False, msg=str(e))

    if mode =="write":
        try:
            status, out, err = save_secrets(path, var, val)
            if status != 0:
                module.fail_json(changed=False, msg=str(err))

        except:
            module.fail_json(changed=False, msg="Failed to save secrets")
        try:
            d = dict()
            d[var] = get_secret_from_path_with_var(path, var)
            module.exit_json(changed=True, **d)
        except Exception, e:
            module.fail_json(changed=False, msg="Failed to get secret from path: {0}".format(str(e)))

    if mode == "list":
        try:
            module.exit_json(changed=False, vault_secrets=list_path(path))
        except Exception, e:
            module.fail_json(changed=False, msg=str(e))

        # module.fail_json(changed=False, reason="Could not open file for read: {0}".format(definitions))
    # module.exit_json(changed=True, ansible_facts=obj_dict)



from ansible.module_utils.basic import AnsibleModule
if __name__ == '__main__':
    main()



    
